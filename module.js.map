{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"lodash\"","webpack:///external amd \"react\"","webpack:///external amd \"rxjs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./types.ts","webpack:///./datasource.ts","webpack:///./ConfigEditor.tsx","webpack:///./QueryEditor.tsx","webpack:///./VariableQueryEditor.tsx","webpack:///./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__545__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__980__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","module.exports = __WEBPACK_EXTERNAL_MODULE__177__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { DataQuery, DataSourceJsonData } from '@grafana/data';\n\nexport interface MongoDBQuery extends DataQuery {\n  database: string;\n  collection: string;\n  timestampField: string;\n  timestampFormat: string;\n  labelFields: string[];\n  legendFormat: string;\n  valueFields: string[];\n  valueFieldTypes: string[];\n  aggregation: string;\n  autoTimeBound: boolean;\n  autoTimeBoundAtStart: boolean;\n  autoTimeSort: boolean;\n  schemaInference: boolean;\n  schemaInferenceDepth: number;\n}\n\nexport enum MongoDBQueryType {\n    Timeseries = \"Timeseries\",\n    Table = \"Table\",\n};\n\nexport const defaultQuery: Partial<MongoDBQuery> = {\n    database: \"my_db\",\n    collection: \"my_collection\",\n    queryType: MongoDBQueryType.Timeseries,\n    timestampField: \"timestamp\",\n    timestampFormat: \"\",\n    labelFields: [ \"sensorID\" ],\n    legendFormat: \"\",\n    valueFields: [ \"measurement\" ],\n    valueFieldTypes: [ \"float64\" ],\n    aggregation: JSON.stringify([\n        { \n            \"$project\": { \n                \"timestamp\": 1, \n                \"sensorID\": \"$metadata.sensorID\",\n                \"measurement\": 1, \n                \"_id\": 0 \n            }\n        }\n    ]),\n    autoTimeBound: false,\n    autoTimeSort: false,\n    schemaInference: false,\n    schemaInferenceDepth: 20,\n};\n\nexport interface MongoDBVariableQuery {\n    database: string;\n    collection: string;\n    aggregation: string;\n    fieldName: string;\n    fieldType: string;\n};\n\nexport const defaultVariableQuery: Partial<MongoDBVariableQuery> = {\n    database: \"my_db\",\n    collection: \"my_collection\",\n    aggregation: JSON.stringify([\n        {\"$group\":{\"_id\":\"$label\", \"count\": {\"$sum\":1}}}\n    ]),\n    fieldName: \"_id\",\n    fieldType: \"string\"\n};\n\n/**\n * These are options configured for each DataSource instance.\n */\nexport interface MongoDBDataSourceOptions extends DataSourceJsonData {\n  url?: string;\n  tls?: boolean;\n  tlsInsecure?: boolean;\n  tlsCertificate?: string;\n  tlsCa?: string;\n  tlsServerName?: string;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\nexport interface MongoDBSecureJsonData {\n    username?: string;\n    password?: string;\n    tlsCertificateKey?: string;\n}\n","import { lastValueFrom, Observable } from 'rxjs';\nimport { \n    DataSourceInstanceSettings,\n    DataQueryRequest, \n    DataQueryResponse, \n    MetricFindValue,\n    ScopedVars\n} from '@grafana/data';\nimport {\n    DataSourceWithBackend, \n    getTemplateSrv,\n    frameToMetricFindValue\n} from '@grafana/runtime';\nimport { MongoDBDataSourceOptions, MongoDBQuery, MongoDBQueryType, MongoDBVariableQuery } from './types';\n\nexport class DataSource extends DataSourceWithBackend<MongoDBQuery, MongoDBDataSourceOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<MongoDBDataSourceOptions>) {\n    super(instanceSettings);\n  }\n\n applyTemplateVariables(query: MongoDBQuery, scopedVars: ScopedVars): Record<string, any> {\n    const templateSrv = getTemplateSrv();\n    return {\n      ...query,\n      database: query.database ? templateSrv.replace(query.database, scopedVars) : '',\n      collection: query.collection ? templateSrv.replace(query.collection, scopedVars) : '',\n      aggregation: query.aggregation ? templateSrv.replace(query.aggregation, scopedVars, 'json') : ''\n    };\n  }\n\n\n  query(request: DataQueryRequest<MongoDBQuery>): Observable<DataQueryResponse> {\n      const templateSrv = getTemplateSrv();\n      templateSrv.updateTimeRange(request.range);\n      return super.query(request);\n  }\n\n  async metricFindQuery(query: MongoDBVariableQuery, options?: any): Promise<MetricFindValue[]> {\n    const target: Partial<MongoDBQuery> = {\n        refId: 'metricFindQuery',\n        database: query.database,\n        collection: query.collection,\n        queryType: MongoDBQueryType.Table,\n        timestampField: \"\",\n        timestampFormat: \"\",\n        labelFields: [],\n        valueFields: [ query.fieldName ],\n        valueFieldTypes: [ query.fieldType ],\n        aggregation: query.aggregation,\n        autoTimeBound: false,\n        autoTimeSort: false,\n        schemaInference: false,\n        schemaInferenceDepth: 0,\n    }\n\n    let dataQuery = {\n        ...options,\n        targets: [target]\n    }\n    let dataQueryRequest = dataQuery as DataQueryRequest<MongoDBQuery>\n\n    return lastValueFrom(\n        this.query(dataQueryRequest)\n    ).then((rsp) => {\n        if (rsp.error) {\n            throw new Error(rsp.error.message);\n        }\n        if (rsp.data?.length) {\n          return frameToMetricFindValue(rsp.data[0]);\n        }\n        return [];\n    });\n  }\n}\n","import React, { ChangeEvent, PureComponent } from 'react';\nimport {\n  FieldSet,\n  InlineField,\n  InlineFieldRow,\n  Input,\n  SecretInput,\n  TextArea,\n  SecretTextArea,\n  Field,\n  Switch,\n} from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { MongoDBDataSourceOptions, MongoDBSecureJsonData } from './types';\n\n\ninterface Props extends DataSourcePluginOptionsEditorProps<MongoDBDataSourceOptions> {}\n\ninterface State {}\n\nexport class ConfigEditor extends PureComponent<Props, State> {\n  onURLChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      url: event.target.value,\n    } as MongoDBDataSourceOptions;\n    onOptionsChange({ ...options, jsonData });\n  };\n  onTLSCAChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      tlsCa: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n  onTLSCertificateChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      tlsCertificate: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n  onTLSChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      tls: event.target.checked,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n  onTLSServerNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      tlsServerName: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onUsernameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const secureJsonData = {\n      ...options.secureJsonData,\n      username: event.target.value,\n    };\n    onOptionsChange({ ...options, secureJsonData });\n  };\n  onPasswordChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const secureJsonData = {\n      ...options.secureJsonData,\n      password: event.target.value,\n    };\n    onOptionsChange({ ...options, secureJsonData });\n  };\n  onTLSInsecureChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      tlsInsecure: event.target.checked,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n  onTLSCertificateKeyChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const secureJsonData = {\n      ...options.secureJsonData,\n      tlsCertificateKey: event.target.value,\n    };\n    onOptionsChange({ ...options, secureJsonData });\n  };\n\n\n\n  onResetCredential = () => {\n    const { onOptionsChange, options } = this.props;\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        username: false,\n        password: false,\n        tlsCertificateKey: false,\n      },\n    });\n  };\n\n  readonly shortWidth = 24;\n  readonly longWidth = 56;\n  readonly beginCert = \"-----BEGIN CERTIFICATE-----\";\n  readonly endCert = \"-----END CERTIFICATE-----\";\n  readonly beginKey = \"-----BEGIN RSA PRIVATE KEY-----\";\n  readonly endKey = \"-----END RSA PRIVATE KEY-----\";\n\n  renderCredentials() {\n    const { options } = this.props;\n    const { secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as MongoDBSecureJsonData;\n\n    return (\n      <>\n        <InlineFieldRow>\n          <InlineField labelWidth={this.shortWidth} label=\"Username\">\n            <SecretInput\n              width={this.longWidth}\n              isConfigured={(secureJsonFields && secureJsonFields.username) as boolean}\n              value={secureJsonData.username || ''}\n              placeholder=\"Username\"\n              onReset={this.onResetCredential}\n              onChange={this.onUsernameChange}\n            ></SecretInput>\n          </InlineField>\n          <InlineField label=\"Password\" labelWidth={this.shortWidth}>\n            <SecretInput\n              width={this.longWidth}\n              isConfigured={(secureJsonFields && secureJsonFields.password) as boolean}\n              value={secureJsonData.password || ''}\n              label=\"Password\"\n              placeholder=\"Password\"\n              onReset={this.onResetCredential}\n              onChange={this.onPasswordChange}\n            ></SecretInput>\n          </InlineField>\n        </InlineFieldRow>\n      </>\n    )\n  }\n\n  renderTls() {\n    const { options } = this.props;\n    const { jsonData } = options;\n\n    return (\n      <>\n        <Field label=\"TLS Enabled\">\n          <Switch\n            value={jsonData.tls || false}\n            onChange={this.onTLSChange}\n          />\n        </Field>\n        { jsonData.tls ? this.renderTlsFields() : null }\n      </>\n    )\n  }\n\n  renderTlsFields() {\n    const { options } = this.props;\n    const { jsonData } = options;\n\n    return (\n      <>\n        <Field label=\"Insecure (Skip Verification)\">\n          <Switch\n            value={jsonData.tlsInsecure || false}\n            onChange={this.onTLSInsecureChange}\n          />\n        </Field>\n        { jsonData.tlsInsecure ? null : this.renderTlsVerification() }\n        { this.renderTlsClient() }\n      </>\n    )\n  }\n\n  renderTlsVerification() {\n    const { options } = this.props;\n    const { jsonData } = options;\n    \n    return (\n      <> \n        <Field label=\"TLS Certificate Authority\">\n          <TextArea\n            value={jsonData.tlsCa || ''}\n            placeholder={`${this.beginCert}\\n...\\n${this.endCert}`}\n            onChange={this.onTLSCAChange}\n            cols={this.longWidth}\n          />\n        </Field>\n        <InlineField\n            labelWidth={this.shortWidth}\n            label=\"Expected Server Name\"\n            tooltip=\"If your server's certificates are for a different hostname than you use to connect, specify that different hostname here\"\n            >\n          <Input\n            width={this.longWidth}\n            name=\"tlsServerName\"\n            type=\"text\"\n            onChange={this.onTLSServerNameChange}\n            value={jsonData.tlsServerName || ''}\n            placeholder=\"some.other.hostname\"\n          ></Input>\n        </InlineField>\n      </>\n    )\n  }\n\n  renderTlsClient() {\n    const { options } = this.props;\n    const { jsonData, secureJsonFields } = options;\n    const secureJsonData = (options.secureJsonData || {}) as MongoDBSecureJsonData;\n\n    return (\n      <>\n        <Field label=\"TLS Certificate\">\n          <TextArea\n            value={jsonData.tlsCertificate || ''}\n            placeholder={`${this.beginCert}\\n...\\n${this.endCert}`}\n            onChange={this.onTLSCertificateChange}\n            cols={this.longWidth}\n          />\n        </Field>\n        <br/>\n        <Field label=\"TLS Certificate Key\">\n          <SecretTextArea\n            value={secureJsonData.tlsCertificateKey || ''}\n            isConfigured={(secureJsonFields && secureJsonFields.tlsCertificateKey) as boolean}\n            placeholder={`${this.beginKey}\\n...\\n${this.endKey}`}\n            onChange={this.onTLSCertificateKeyChange}\n            onReset={this.onResetCredential}\n            cols={this.longWidth}\n          />\n        </Field>\n      </>\n    )\n  }\n\n  render() {\n    const { options } = this.props;\n    const { jsonData } = options;\n\n    return (\n      <>\n        <FieldSet label=\"MongoDB Connection\" width={400}>\n          <InlineField labelWidth={this.shortWidth} label=\"URL\">\n            <Input\n              width={this.longWidth}\n              name=\"url\"\n              type=\"text\"\n              onChange={this.onURLChange}\n              value={jsonData.url || ''}\n              placeholder=\"mongodb[+svc]://hostname:port[,hostname:port][/?key=value]\"\n            ></Input>\n          </InlineField>\n          { this.renderCredentials() }\n          { this.renderTls() }\n        </FieldSet>            \n      </>\n    );\n  }\n}\n","import { defaults, zip } from 'lodash';\n\nimport React, { ChangeEvent, PureComponent, SyntheticEvent } from 'react';\nimport { \n  Input,\n  FieldSet,\n  InlineField,\n  InlineFormLabel,\n  InlineFieldRow,\n  InlineSwitch,\n  CodeEditor,\n  Select,\n  Button,\n} from '@grafana/ui';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { defaultQuery, MongoDBDataSourceOptions, MongoDBQuery, MongoDBQueryType } from './types';\n\ntype Props = QueryEditorProps<DataSource, MongoDBQuery, MongoDBDataSourceOptions>;\n\nexport class QueryEditor extends PureComponent<Props> {\n  readonly labelWidth = 25;\n  readonly longWidth = 50;\n\n  readonly queryTypeOptions = [\n    {\n        label: \"Timeseries\",\n        value: MongoDBQueryType.Timeseries,\n        description: \"Return time-indexed series of values, distinguished by a set of labels\"\n    },\n    {\n        label: \"Table\",\n        value: MongoDBQueryType.Table,\n        description: \"Return arbitrary rows for a table or further processing\"\n    }\n  ];\n\n  readonly defaultQueryType: MongoDBQueryType = MongoDBQueryType.Timeseries;\n\n  onDatabaseChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, database: event.target.value });\n  };\n\n  onCollectionChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, collection: event.target.value });\n    // executes the query\n    onRunQuery();\n  };\n  onQueryTypeChange = (\n        query: Props['query'],\n        onChange: Props['onChange'],\n        onRunQuery: Props['onRunQuery'],\n  ) => (newValue: SelectableValue) => {\n    onChange({ ...query, queryType: newValue.value });\n    onRunQuery();\n  };\n\n  onTimestampFieldChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, timestampField: event.target.value });\n    // executes the query\n    onRunQuery();\n  };\n\n  onTimestampFormatChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, timestampFormat: event.target.value });\n    // executes the query\n    onRunQuery();\n  };\n\n  \n  onLabelFieldChange = (index: number) => (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    let newLabelFields = Array.from(query.labelFields)\n    newLabelFields.splice(index, 1, event.target.value);\n    onChange({ ...query, labelFields: newLabelFields });\n    // executes the query\n    onRunQuery();\n  };\n\n  onLabelFieldAppend = () => {\n    const { onChange, query, onRunQuery } = this.props;\n    let newLabelFields = Array.from(query.labelFields)\n    newLabelFields.splice(query.labelFields.length, 0, \"\");\n    onChange({ ...query, labelFields: newLabelFields });\n    // executes the query\n    onRunQuery();\n  };\n\n  onLabelFieldRemove = (index: number) => () => {\n    const { onChange, query, onRunQuery } = this.props;\n    let newLabelFields = Array.from(query.labelFields)\n    newLabelFields.splice(index, 1);\n    onChange({ ...query, labelFields: newLabelFields });\n    // executes the query\n    onRunQuery();\n  };\n\n  onLegendFormatChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, legendFormat: event.target.value });\n    // executes the query\n    onRunQuery();\n  };\n\n  onSchemaInferenceChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, schemaInference: event.target.checked });\n    // executes the query\n    onRunQuery();\n  };\n  onSchemaInferenceDepthChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, schemaInferenceDepth: parseInt(event.target.value, 10) });\n    // executes the query\n    onRunQuery();\n  };\n\n  onValueFieldChange = (index: number) => (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    let newValueFields = Array.from(query.valueFields);\n    newValueFields.splice(index, 1, event.target.value);\n    onChange({ ...query, valueFields: newValueFields });\n    // executes the query\n    onRunQuery();\n  };\n\n  onValueFieldTypeChange = (index: number) => (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    let newValueFieldTypes = Array.from(query.valueFieldTypes);\n    newValueFieldTypes.splice(index, 1, event.target.value);\n    onChange({ ...query, valueFieldTypes: newValueFieldTypes });\n    // executes the query\n    onRunQuery();\n  };\n\n  onValueFieldAppend = () => {\n    const { onChange, query, onRunQuery } = this.props;\n    let newValueFields = Array.from(query.valueFields);\n    let newValueFieldTypes = Array.from(query.valueFieldTypes);\n    newValueFields.splice(query.valueFields.length, 0, \"\");\n    newValueFieldTypes.splice(query.valueFieldTypes.length, 0, \"\");\n    onChange({ ...query, valueFields: newValueFields, valueFieldTypes: newValueFieldTypes });\n    // executes the query\n    onRunQuery();\n  };\n\n  onValueFieldRemove = (index: number) => () => {\n    const { onChange, query, onRunQuery } = this.props;\n    let newValueFields = Array.from(query.valueFields);\n    let newValueFieldTypes = Array.from(query.valueFieldTypes);\n    newValueFields.splice(index, 1);\n    newValueFieldTypes.splice(index, 1);\n    onChange({ ...query, valueFields: newValueFields, valueFieldTypes: newValueFieldTypes });\n    // executes the query\n    onRunQuery();\n  };\n\n\n\n  onAutoTimeBoundChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, autoTimeBound: event.currentTarget.checked });\n    // executes the query\n    onRunQuery();\n  };\n\n  onAutoTimeBoundAtStartChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, autoTimeBoundAtStart: event.currentTarget.checked });\n    // executes the query\n    onRunQuery();\n  };\n\n  onAutoTimeSortChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, autoTimeSort: event.currentTarget.checked });\n    // executes the query\n    onRunQuery();\n  };\n\n  onAggregationChange = (newAggregation: string) => {\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({ ...query, aggregation: newAggregation });\n    // executes the query\n    onRunQuery();\n  };\n\n\n  render() {\n    const query = defaults(this.props.query, defaultQuery);\n    const { onChange, onRunQuery } = this.props;\n\n    return (\n      <>\n        <FieldSet>\n          <InlineFieldRow>\n            <InlineField labelWidth={this.labelWidth} label=\"Database.Collection\">\n              <Input\n                width={this.longWidth}\n                name=\"database\"\n                type=\"text\"\n                placeholder=\"my_database\"\n                value={query.database || ''}\n                onChange={this.onDatabaseChange}\n              ></Input>\n            </InlineField>\n            <InlineField label=\".\">\n              <Input\n                width={this.longWidth}\n                name=\"collection\"\n                type=\"text\"\n                placeholder=\"my_collection\"\n                value={query.collection || ''}\n                onChange={this.onCollectionChange}\n              ></Input>\n            </InlineField>\n          </InlineFieldRow>\n          <InlineField\n              labelWidth={this.labelWidth}\n              tooltip=\"Type of query to execute\"\n              label=\"QueryType\"\n              >\n            <Select\n              options={this.queryTypeOptions}\n              value={this.queryTypeOptions.find((queryType) => queryType.value === query.queryType) ?? this.queryTypeOptions[0]}\n              onChange={this.onQueryTypeChange(query, onChange, onRunQuery)}\n                width={this.longWidth}\n            ></Select>\n          </InlineField>\n\n          { (query.queryType || this.defaultQueryType) === MongoDBQueryType.Timeseries ? (\n            <>\n              <InlineField\n                  labelWidth={this.labelWidth}\n                  label=\"Timestamp Field\"\n                  tooltip=\"Field to expect in every document containing the timestamp\"\n                  >\n                <Input\n                  width={this.longWidth}\n                  value={query.timestampField || ''}\n                  onChange={this.onTimestampFieldChange}\n                  type=\"text\"\n                  placeholder=\"timestamp\"\n                  name=\"timestampField\"\n                ></Input>\n              </InlineField>\n              <InlineField\n                  labelWidth={this.labelWidth}\n                  label=\"Timestamp Format\"\n                  tooltip=\"If blank, assume timestamps are native BSON dates. Otherwise, parse the timestamp as a string in the format described here: https://pkg.go.dev/time#Parse\"\n                  >\n                <Input\n                  width={this.longWidth}\n                  value={query.timestampFormat || ''}\n                  onChange={this.onTimestampFormatChange}\n                  type=\"text\"\n                  placeholder=\"<BSON $date>\"\n                  name=\"timestampField\"\n                ></Input>\n              </InlineField>\n              <InlineFormLabel\n                  width={this.labelWidth}\n                  tooltip=\"Each unique combination of these fields defines a separate time series. Nested fields are not supported, please project to a flat document\"\n              >\n                Label Fields\n              </InlineFormLabel>\n              <div>\n                  {query.labelFields.map((field, index) => (\n                      <InlineFieldRow key={index}>\n                          <Input\n                            width={this.longWidth}\n                            onChange={this.onLabelFieldChange(index)}\n                            value={field}\n                            placeholder=\"name\"\n                          ></Input>\n                          <Button onClick={this.onLabelFieldRemove(index)}>-</Button>\n                      </InlineFieldRow>\n                  ))}\n                  <Button onClick={this.onLabelFieldAppend}>+</Button>\n              </div>\n              <InlineField\n                    labelWidth={this.labelWidth}\n                    label=\"Legend Format\"\n                    tooltip={\"Series name override. Replacements are:\\n{{.Value}}: Value field name.\\n{{.Labels.field_name}}: Value of the label with name 'field_name'\\n{{.Labels}}: key=value,... for all labels\\nSee https://pkg.go.dev/text/template for full syntax.\\nFunctions from https://masterminds.github.io/sprig/ are provided\"}\n              >\n                <Input\n                  value={query.legendFormat || \"\"}\n                  onChange={this.onLegendFormatChange}\n                />\n              </InlineField>\n            </>\n          ) : false }\n          { (query.queryType || this.defaultQueryType) === MongoDBQueryType.Timeseries ? (\n            <>\n              <InlineField\n                  label=\"Automatic Time-Bound\"\n                  labelWidth={this.labelWidth}\n                  tooltip=\"Add a stage at the end of your pipeline to $match documents where Timestamp Field is within the current dashboard time range\"\n                  >\n                <InlineSwitch\n                  value={query.autoTimeBound || false}\n                  onChange={this.onAutoTimeBoundChange}\n                ></InlineSwitch>\n              </InlineField>\n              { query.autoTimeBound ? (\n                <InlineField\n                    label=\"Time-Bound at Start\"\n                    labelWidth={this.labelWidth}\n                    tooltip=\"Instead add the automatic time bound $match stage at the beginning of your pipeline. This only works if your timestamp field is present and correctly formatted in your collection, but can improve performance by not processing records outside of the current time range\"\n                    >\n                  <InlineSwitch\n                    value={query.autoTimeBoundAtStart || false}\n                    onChange={this.onAutoTimeBoundAtStartChange}\n                  ></InlineSwitch>\n                </InlineField>     \n              ) : false }\n              <InlineField\n                  label=\"Automatic Time-Sort\"\n                  labelWidth={this.labelWidth}\n                  tooltip=\"Add a stage at the end to $sort documents ascending by Timestamp Field\"\n                  >\n                <InlineSwitch\n                  value={query.autoTimeSort || false}\n                  onChange={this.onAutoTimeSortChange}\n                ></InlineSwitch>\n              </InlineField>\n            </>\n          ) : false }\n\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              width={this.labelWidth}\n              tooltip=\"If enabled, Grafana will attempt to figure out the types of your data based on the first few documents. Otherwise, you will need to specify the names and datatypes of each field\"\n            >\n              Infer Schema\n            </InlineFormLabel>\n            <InlineSwitch\n              value={query.schemaInference || false}\n              onChange={this.onSchemaInferenceChange}\n            />\n          </div>\n\n          { query.schemaInference ?\n            <>\n              <InlineField\n                    labelWidth={this.labelWidth}\n                    label=\"Schema Inference Depth\"\n                    tooltip=\"How many documents to consider for inference before assuming no new fields will be present. If all documents have the same fields, you can set this to 1\"\n              >\n                <Input\n                    value={`${query.schemaInferenceDepth}`}\n                    onChange={this.onSchemaInferenceDepthChange}\n                    type=\"number\"\n                />\n              </InlineField>\n            </>\n            :\n            <>\n              <InlineFormLabel\n                width={this.labelWidth}\n                tooltip=\"These fields contain measurements or other recorded values. You must also specify the data types (float64, uint64, string, etc) for each field. Prefix with a star if a field may not appear in every document for a given series. See https://pkg.go.dev/github.com/grafana/grafana-plugin-sdk-go/data#FieldType for a list of valid types. Nested fields are not supported, please project to a flat document\"\n              >Value Fields</InlineFormLabel>\n              {zip(query.valueFields, query.valueFieldTypes).map((field, index) => (\n                  <InlineFieldRow key={index}>\n                      <Input\n                        onChange={this.onValueFieldChange(index)}\n                        width={this.longWidth}\n                        value={field[0]}\n                        placeholder=\"name\"\n                      ></Input>\n                      <InlineField label=\":\">\n                          <Input\n                            onChange={this.onValueFieldTypeChange(index)}\n                            width={this.longWidth}\n                            value={field[1]}\n                            placeholder=\"type\"\n                          ></Input>\n                      </InlineField>\n                      <Button onClick={this.onValueFieldRemove(index)}>-</Button>\n                  </InlineFieldRow>\n              ))}\n              <Button onClick={this.onValueFieldAppend}>+</Button>\n            </>\n          }\n\n        </FieldSet>\n        <InlineFormLabel\n          width={this.labelWidth}\n          tooltip=\"Argument to db.collection.aggregate(...), a JSON array of pipeline stage objects. Helper functions like new Date() or ObjectId() are not supported, consult the MongoDB manual at https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/ to see how to represent these functions in pure JSON\"\n        >\n          Aggregation\n        </InlineFormLabel>\n        <div \n          style={{ resize: \"vertical\" }}\n        >\n          <CodeEditor\n            height=\"300px\"\n            showLineNumbers={true}\n            language=\"json\"\n            value={query.aggregation || ''}\n            onBlur={this.onAggregationChange}\n          ></CodeEditor>\n        </div>\n      </>\n    );\n  }\n}\n","import { MongoDBVariableQuery, defaultVariableQuery } from './types';\nimport { defaults } from 'lodash';\nimport React, { ChangeEvent, PureComponent } from 'react';\nimport { \n  Input,\n  InlineField,\n  InlineFormLabel,\n  InlineFieldRow,\n  CodeEditor,\n} from '@grafana/ui';\n\n\ninterface VariableQueryProps {\n  query: MongoDBVariableQuery;\n  onChange: (query: MongoDBVariableQuery) => void;\n}\n\nexport class VariableQueryEditor extends PureComponent<VariableQueryProps> {\n  readonly labelWidth = 25;\n  readonly longWidth = 50;\n\n  onDatabaseChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, database: event.target.value });\n  };\n\n  onCollectionChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, collection: event.target.value });\n  };\n\n  onFieldNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, fieldName: event.target.value });\n  };\n\n  onFieldTypeChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, fieldType: event.target.value });\n  };\n\n  onAggregationChange = (newAggregation: string) => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, aggregation: newAggregation });\n  };\n\n  render() {\n    const query = defaults(this.props.query, defaultVariableQuery);\n\n    return (\n      <>\n        <InlineFieldRow>\n          <InlineField\n              labelWidth={this.labelWidth}\n              label=\"Database.Collection\"\n              >\n            <Input\n              width={this.longWidth}\n              name=\"database\"\n              type=\"text\"\n              placeholder=\"my_database\"\n              onChange={this.onDatabaseChange}\n              value={query.database}\n            ></Input>\n          </InlineField>\n          <InlineField\n              label=\".\"\n              >\n            <Input\n              width={this.longWidth}\n              name=\"collection\"\n              type=\"text\"\n              placeholder=\"my_collection\"\n              onChange={this.onCollectionChange}\n              value={query.collection}\n            ></Input>\n          </InlineField>\n        </InlineFieldRow>\n  \n        <InlineFieldRow>\n           <InlineField\n               label=\"Field\"\n               labelWidth={this.labelWidth}\n               >\n             <Input\n               width={this.longWidth}\n               placeholder=\"name\"\n               onChange={this.onFieldNameChange}\n               value={query.fieldName}\n             ></Input>\n           </InlineField>\n           <InlineField\n              label=\":\"\n              >\n            <Input\n              width={this.longWidth}\n              placeholder=\"type\"\n              onChange={this.onFieldTypeChange}\n              value={query.fieldType}\n            ></Input>\n          </InlineField>\n        </InlineFieldRow>\n  \n        <InlineFormLabel\n          width={this.labelWidth}\n          tooltip=\"Argument to db.collection.aggregate(...), a JSON array of pipeline stage objects. Helper functions like new Date() or ObjectId() are not supported, consult the MongoDB manual at https://www.mongodb.com/docs/manual/reference/mongodb-extended-json/ to see how to represent these functions in pure JSON\"\n        >\n          Aggregation\n        </InlineFormLabel>\n        <CodeEditor\n          height=\"200px\"\n          showLineNumbers={true}\n          language=\"json\"\n          onBlur={this.onAggregationChange}\n          value={query.aggregation}\n        ></CodeEditor>\n      </>\n    );\n  }\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { VariableQueryEditor } from './VariableQueryEditor';\nimport { MongoDBQuery, MongoDBDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MongoDBQuery, MongoDBDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setVariableQueryEditor(VariableQueryEditor)\n  ;\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__545__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__980__","__WEBPACK_EXTERNAL_MODULE__650__","__WEBPACK_EXTERNAL_MODULE__177__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","MongoDBQueryType","Timeseries","Table","defaultQuery","database","collection","queryType","timestampField","timestampFormat","labelFields","legendFormat","valueFields","valueFieldTypes","aggregation","JSON","stringify","autoTimeBound","autoTimeSort","schemaInference","schemaInferenceDepth","defaultVariableQuery","fieldName","fieldType","DataSource","DataSourceWithBackend","applyTemplateVariables","query","scopedVars","templateSrv","getTemplateSrv","replace","request","updateTimeRange","range","super","metricFindQuery","options","target","refId","dataQueryRequest","targets","lastValueFrom","then","rsp","error","Error","message","data","length","frameToMetricFindValue","constructor","instanceSettings","ConfigEditor","PureComponent","renderCredentials","this","props","secureJsonFields","secureJsonData","InlineFieldRow","InlineField","labelWidth","shortWidth","label","SecretInput","width","longWidth","isConfigured","username","placeholder","onReset","onResetCredential","onChange","onUsernameChange","password","onPasswordChange","renderTls","jsonData","Field","Switch","tls","onTLSChange","renderTlsFields","tlsInsecure","onTLSInsecureChange","renderTlsVerification","renderTlsClient","TextArea","tlsCa","beginCert","endCert","onTLSCAChange","cols","tooltip","Input","name","type","onTLSServerNameChange","tlsServerName","tlsCertificate","onTLSCertificateChange","br","SecretTextArea","tlsCertificateKey","beginKey","endKey","onTLSCertificateKeyChange","render","FieldSet","onURLChange","url","event","onOptionsChange","checked","QueryEditor","defaults","onRunQuery","onDatabaseChange","onCollectionChange","Select","queryTypeOptions","find","onQueryTypeChange","defaultQueryType","onTimestampFieldChange","onTimestampFormatChange","InlineFormLabel","div","map","field","index","onLabelFieldChange","Button","onClick","onLabelFieldRemove","onLabelFieldAppend","onLegendFormatChange","InlineSwitch","onAutoTimeBoundChange","autoTimeBoundAtStart","onAutoTimeBoundAtStartChange","onAutoTimeSortChange","className","onSchemaInferenceChange","onSchemaInferenceDepthChange","zip","onValueFieldChange","onValueFieldTypeChange","onValueFieldRemove","onValueFieldAppend","style","resize","CodeEditor","height","showLineNumbers","language","onBlur","onAggregationChange","description","newValue","newLabelFields","Array","from","splice","parseInt","newValueFields","newValueFieldTypes","currentTarget","newAggregation","VariableQueryEditor","onFieldNameChange","onFieldTypeChange","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","setVariableQueryEditor"],"sourceRoot":""}